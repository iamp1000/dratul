"""Add encrypted fields to patients

Revision ID: 4c8291eccb75
Revises: ed9b5af6e16f
Create Date: 2025-10-09 23:33:41.256728

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '4c8291eccb75'
down_revision: Union[str, Sequence[str], None] = 'ed9b5af6e16f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_doctor_schedules_id'), table_name='doctor_schedules')
    op.drop_index(op.f('ix_doctor_schedules_user_id'), table_name='doctor_schedules')
    op.drop_table('doctor_schedules')
    op.drop_index(op.f('ix_unavailability_periods_google_calendar_event_id'), table_name='unavailability_periods')
    op.drop_index(op.f('ix_unavailability_periods_id'), table_name='unavailability_periods')
    op.drop_index(op.f('ix_unavailability_periods_user_id'), table_name='unavailability_periods')
    op.drop_table('unavailability_periods')
    op.add_column('patients', sa.Column('first_name_encrypted', sa.LargeBinary(), nullable=False))
    op.add_column('patients', sa.Column('last_name_encrypted', sa.LargeBinary(), nullable=False))
    op.add_column('patients', sa.Column('city_encrypted', sa.LargeBinary(), nullable=False))
    op.add_column('patients', sa.Column('first_name_hash', sa.String(length=64), nullable=False))
    op.add_column('patients', sa.Column('last_name_hash', sa.String(length=64), nullable=False))
    op.alter_column('patients', 'date_of_birth',
               existing_type=sa.DATE(),
               nullable=False)
    op.drop_index(op.f('ix_patients_name_hash'), table_name='patients')
    op.create_index(op.f('ix_patients_first_name_hash'), 'patients', ['first_name_hash'], unique=False)
    op.create_index(op.f('ix_patients_last_name_hash'), 'patients', ['last_name_hash'], unique=False)
    op.drop_column('patients', 'name_encrypted')
    op.drop_column('patients', 'name_hash')
    op.drop_index(op.f('idx_unavailable_location_date'), table_name='unavailable_periods')
    op.create_index('idx_unavailable_.location_date', 'unavailable_periods', ['location_id', 'start_datetime'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_unavailable_.location_date', table_name='unavailable_periods')
    op.create_index(op.f('idx_unavailable_location_date'), 'unavailable_periods', ['location_id', 'start_datetime'], unique=False)
    op.add_column('patients', sa.Column('name_hash', sa.VARCHAR(length=64), autoincrement=False, nullable=False))
    op.add_column('patients', sa.Column('name_encrypted', postgresql.BYTEA(), autoincrement=False, nullable=False))
    op.drop_index(op.f('ix_patients_last_name_hash'), table_name='patients')
    op.drop_index(op.f('ix_patients_first_name_hash'), table_name='patients')
    op.create_index(op.f('ix_patients_name_hash'), 'patients', ['name_hash'], unique=False)
    op.alter_column('patients', 'date_of_birth',
               existing_type=sa.DATE(),
               nullable=True)
    op.drop_column('patients', 'last_name_hash')
    op.drop_column('patients', 'first_name_hash')
    op.drop_column('patients', 'city_encrypted')
    op.drop_column('patients', 'last_name_encrypted')
    op.drop_column('patients', 'first_name_encrypted')
    op.create_table('unavailability_periods',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('start_datetime', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('end_datetime', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('reason', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('google_calendar_event_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('unavailability_periods_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('unavailability_periods_pkey'))
    )
    op.create_index(op.f('ix_unavailability_periods_user_id'), 'unavailability_periods', ['user_id'], unique=False)
    op.create_index(op.f('ix_unavailability_periods_id'), 'unavailability_periods', ['id'], unique=False)
    op.create_index(op.f('ix_unavailability_periods_google_calendar_event_id'), 'unavailability_periods', ['google_calendar_event_id'], unique=False)
    op.create_table('doctor_schedules',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('day_of_week', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('start_time_hospital', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('end_time_hospital', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('start_time_home', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('end_time_home', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('start_time_online', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('end_time_online', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('is_available', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('doctor_schedules_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('doctor_schedules_pkey'))
    )
    op.create_index(op.f('ix_doctor_schedules_user_id'), 'doctor_schedules', ['user_id'], unique=False)
    op.create_index(op.f('ix_doctor_schedules_id'), 'doctor_schedules', ['id'], unique=False)
    # ### end Alembic commands ###
